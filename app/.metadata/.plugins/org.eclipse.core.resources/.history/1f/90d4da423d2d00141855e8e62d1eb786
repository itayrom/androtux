package com.androtux;

import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;

public class ToggleButton extends View implements IToggleable {
	private Paint _paint;
	private boolean _pressed;
	private Bitmap _icon;
	private Rect _rect;
	private int _bgColor, _onColor, _offColor;
	
	private List<Runnable> _ops;
	private List<IToggleable> _listeners;
	
	public ToggleButton(Context context) {
		super(context);
		init();
	}
	
	public ToggleButton(Context context, AttributeSet attrs) {
		super(context, attrs);
		init(attrs);
	}
	
	public ToggleButton(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		init(attrs);
	}
	
	protected void init() {
		_ops = new ArrayList<Runnable>();
		_listeners = new ArrayList<IToggleable>();
		_paint = new Paint();
		_pressed = false;
		_icon = BitmapFactory.decodeResource(getResources(), R.drawable.ic_action_keyboard);
		setOffParams();
	}
	
	private void init(AttributeSet attrs) {
		TypedArray a=getContext().obtainStyledAttributes(attrs, R.styleable.ToggleButton);
		_offColor = a.getColor(R.styleable.ToggleButton_offColor, Color.RED);
		_onColor = a.getColor(R.styleable.ToggleButton_onColor, Color.GREEN);
		a.recycle();
		init();
	}
	
	@Override
	public boolean onTouchEvent(MotionEvent event) {
    	int action = event.getActionMasked();
    	
    	switch(action) {
    	case MotionEvent.ACTION_DOWN:
    		_pressed = ! _pressed;
    		if (_pressed) {
    			setOn();
    		}
    		else {
    			setOff();
    		}
    		
			MainActivity.setAxis(_pressed);
			break;
    	case MotionEvent.ACTION_UP:
			break;
    	}
    	
    	this.invalidate();
		return true;
	}
	
	private void run() {
		for (Runnable current : _ops) {
			current.run();
		}
	}
	
	public void addOps(Runnable op) {
		_ops.add(op);
	}
	
	public void addListener(IToggleable listener) {
		_listeners.add(listener);
	}
	
	public void setImage(int id) {
		_icon = BitmapFactory.decodeResource(getResources(), id);
	}
	
	@Override
	protected void onDraw(Canvas canvas) {
		_rect = new Rect(5, 5, getWidth()-5, getHeight()-5);
		_paint.setColor(_bgColor);
		canvas.drawRect(0, 0, getWidth(), getHeight(), _paint);
		canvas.drawBitmap(_icon, null, _rect, null);
	}
	
	protected void setOffParams() {
		_bgColor = _offColor;
	}
	
	protected void setOnParams() {
		_bgColor = _onColor;
	}

	@Override
	public void setOn() {
		_pressed = true;
		setOnParams();
		invalidate();
		
		for (IToggleable current : _listeners) {
			current.setOff();
		}
		
		run();
	}

	@Override
	public void setOff() {
		_pressed = false;
		setOffParams();
		invalidate();
	}
}
