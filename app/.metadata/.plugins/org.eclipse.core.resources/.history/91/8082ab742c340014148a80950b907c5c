/*
**  Android Remote for Tux (AndroTux) 
**  Copyright (C) 2014 Itay Rom <1t4yr0m@gmail.com> Tal Sabo <tal.sabo@gmail.com> 
**
**  This program is free software: you can redistribute it and/or modify
**  it under the terms of the GNU General Public License as published by
**  the Free Software Foundation, either version 3 of the License, or
**  (at your option) any later version.
**
**  This program is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**  GNU General Public License for more details.
**
**  You should have received a copy of the GNU General Public License
**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package com.androtux;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.UUID;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothSocket;
import android.bluetooth.BluetoothDevice;
import android.content.Intent;

public class CommunicationHandler {
	private final UUID APPUUID = UUID.fromString("7335b5f2-ec43-4e53-8419-07657a9a8d52");
	
	private static CommunicationHandler _handler = null;
	
	private InetAddress _serverAddr;
	private String _ip;
	private String _mac;
	private int _port;
	private Socket _socket;
	private BluetoothSocket _btSocket;
	private BluetoothAdapter _btAdapter;
	private ConnectionType _connectionType;
	
	private boolean _isBluetooth, _isWireless;
	
	private CommunicationHandler() {
		_isBluetooth = _isWireless = true;
		_connectionType = ConnectionType.NONE;
	}
	
	public static CommunicationHandler getInstance() {
		if (_handler == null) {
			_handler = new CommunicationHandler();
		}
		
		return _handler;
	}
	
	public boolean connect() {
		switch (_connectionType) {
		case WIRELESS:
			try {
				_serverAddr = InetAddress.getByName(_ip);
				new Thread(new WirelessThread()).start();
			} catch (UnknownHostException e) {
				e.printStackTrace();
				return false;
			}
			break;
		case BLUETOOTH:
			break;
		}
		
		return true;
	}
	
	public boolean connect(String macAddr) {
		return true;
	}
	
	public boolean disconnect() {
		return true;
	}
	
	public boolean sendData(String str) {
		try {
			PrintWriter out = new PrintWriter(new BufferedWriter(
	                new OutputStreamWriter(_socket.getOutputStream())),
	                true);
	        out.println(str);
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
		
		return true;
	}
	
	// Bluetooth setters/getters
	
	public void setConnectionType(ConnectionType type) {
		_connectionType = type;
	}
	
	public ConnectionType getConnectionType() {
		return _connectionType;
	}
	
	public void setIp(String ip) {
		_ip = ip;
	}
	
	public String getIp() {
		return _ip;
	}
	
	public void setMac(String mac) {
		_mac = mac;
	}
	
	public String getMac() {
		return _mac;
	}
	
	public void setBluetoothAdapter(BluetoothAdapter adapter) {
		_btAdapter = adapter;
	}
	
	public BluetoothAdapter getBluetoohAdapter() {
		return _btAdapter;
	}
	
	public void setIsBluetooth(boolean isBt) {
		_isBluetooth = isBt;
	}
	
	public boolean getIsBluetooth() {
		return _isBluetooth;
	}
	
	// <<-- end of Bluetooth setters/getters
	
	class WirelessThread implements Runnable {
	    @Override
	    public void run() {

	        try {
	            _socket = new Socket(_serverAddr, _port);

	        } catch (UnknownHostException e1) {
	            e1.printStackTrace();
	        } catch (IOException e1) {
	            e1.printStackTrace();
	        }

	    }
	}
	
	class BluetoothThread extends Thread {
	    private final BluetoothSocket mmSocket;
	    private final BluetoothDevice mmDevice;
	 
	    public BluetoothThread(BluetoothDevice device) {
	        // Use a temporary object that is later assigned to mmSocket,
	        // because mmSocket is final
	        BluetoothSocket tmp = null;
	        mmDevice = device;
	 
	        // Get a BluetoothSocket to connect with the given BluetoothDevice
	        try {
	            // MY_UUID is the app's UUID string, also used by the server code
	            tmp = device.createRfcommSocketToServiceRecord(APPUUID);
	        } catch (IOException e) { }
	        mmSocket = tmp;
	    }
	 
	    public void run() {
	        // Cancel discovery because it will slow down the connection
	        _btAdapter.cancelDiscovery();
	 
	        try {
	            // Connect the device through the socket. This will block
	            // until it succeeds or throws an exception
	            mmSocket.connect();
	        } catch (IOException connectException) {
	            // Unable to connect; close the socket and get out
	            try {
	                mmSocket.close();
	            } catch (IOException closeException) { }
	            return;
	        }
	 
	        // Do work to manage the connection (in a separate thread)
	        manageConnectedSocket(mmSocket);
	    }
	 
	    /** Will cancel an in-progress connection, and close the socket */
	    public void cancel() {
	        try {
	            mmSocket.close();
	        } catch (IOException e) { }
	    }
	}
}

